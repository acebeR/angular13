{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nexport class TarefaService {\n  constructor() {}\n  listarTodos() {\n    const tarefas = localStorage['tarefas'];\n    return tarefas ? JSON.parse(tarefas) : [];\n  }\n  cadastrar(tarefa) {\n    const tarefas = this.listarTodos();\n    tarefa.id = new Date().getTime();\n    tarefas.push(tarefa);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n  buscarPorId(id) {\n    var tarefas = this.listarTodos();\n    var tarefa = tarefas.find(tarefa => tarefa.id === id);\n    if (!tarefa) {\n      throw new Error(`Tarefa com ID ${id} não encontrada.`);\n    }\n    return tarefa;\n  }\n  atualizar(tarefa) {\n    const tarefas = this.listarTodos();\n    tarefas.forEach((obj, index, objs) => {\n      if (tarefa.id === obj.id) {\n        objs[index] = tarefa;\n      }\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n  remover(id) {\n    let tarefas = this.listarTodos();\n    tarefas = tarefas.filter(tarefa => tarefa.id !== id);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n  alterarStatus(id) {\n    const tarefas = this.listarTodos();\n    tarefas.forEach((obj, index, objs) => {\n      if (id === obj.id) {\n        objs[index].concluida = !obj.concluida;\n      }\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n}\n_class = TarefaService;\n_class.ɵfac = function TarefaService_Factory(t) {\n  return new (t || _class)();\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["TarefaService","constructor","listarTodos","tarefas","localStorage","JSON","parse","cadastrar","tarefa","id","Date","getTime","push","stringify","buscarPorId","find","Error","atualizar","forEach","obj","index","objs","remover","filter","alterarStatus","concluida","factory","ɵfac","providedIn"],"sources":["C:\\Users\\acebe\\Documents\\Git\\angular13\\projeto-final\\src\\app\\tarefas\\shared\\tarefa.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Tarefa } from './tarefa.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TarefaService {\n\n  constructor() { }\n\n  listarTodos(): Tarefa[] {\n    const tarefas = localStorage['tarefas'];\n    return tarefas ? JSON.parse(tarefas) : [];\n  }\n\n  cadastrar(tarefa: Tarefa): void{\n    const tarefas = this.listarTodos();\n    tarefa.id = new Date().getTime();\n    tarefas.push(tarefa);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n\n  buscarPorId(id:number): Tarefa {\n    var tarefas: Tarefa[] = this.listarTodos();\n    var tarefa = tarefas.find(tarefa => tarefa.id === id);\n    if (!tarefa) {\n      throw new Error(`Tarefa com ID ${id} não encontrada.`);\n    }\n    return tarefa;\n  }\n\n  atualizar(tarefa: Tarefa): void{\n    const tarefas: Tarefa[] = this.listarTodos();\n    tarefas.forEach((obj, index, objs) =>{\n      if(tarefa.id === obj.id){\n        objs[index] = tarefa;\n      }\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n\n  remover(id:number): void{\n    let tarefas: Tarefa[] = this.listarTodos();\n    tarefas = tarefas.filter(tarefa => tarefa.id !== id);\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n\n  alterarStatus(id: number): void{\n    const tarefas: Tarefa[] = this.listarTodos();\n    tarefas.forEach((obj, index, objs) =>{\n      if(id === obj.id){\n        objs[index].concluida = !obj.concluida;\n      }\n    });\n    localStorage['tarefas'] = JSON.stringify(tarefas);\n  }\n}\n"],"mappings":";;AAMA,OAAM,MAAOA,aAAa;EAExBC,YAAA,GAAgB;EAEhBC,WAAWA,CAAA;IACT,MAAMC,OAAO,GAAGC,YAAY,CAAC,SAAS,CAAC;IACvC,OAAOD,OAAO,GAAGE,IAAI,CAACC,KAAK,CAACH,OAAO,CAAC,GAAG,EAAE;EAC3C;EAEAI,SAASA,CAACC,MAAc;IACtB,MAAML,OAAO,GAAG,IAAI,CAACD,WAAW,EAAE;IAClCM,MAAM,CAACC,EAAE,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAChCR,OAAO,CAACS,IAAI,CAACJ,MAAM,CAAC;IACpBJ,YAAY,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EACnD;EAEAW,WAAWA,CAACL,EAAS;IACnB,IAAIN,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC1C,IAAIM,MAAM,GAAGL,OAAO,CAACY,IAAI,CAACP,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKA,EAAE,CAAC;IACrD,IAAI,CAACD,MAAM,EAAE;MACX,MAAM,IAAIQ,KAAK,CAAC,iBAAiBP,EAAE,kBAAkB,CAAC;;IAExD,OAAOD,MAAM;EACf;EAEAS,SAASA,CAACT,MAAc;IACtB,MAAML,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC5CC,OAAO,CAACe,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,KAAI;MACnC,IAAGb,MAAM,CAACC,EAAE,KAAKU,GAAG,CAACV,EAAE,EAAC;QACtBY,IAAI,CAACD,KAAK,CAAC,GAAGZ,MAAM;;IAExB,CAAC,CAAC;IACFJ,YAAY,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EACnD;EAEAmB,OAAOA,CAACb,EAAS;IACf,IAAIN,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC1CC,OAAO,GAAGA,OAAO,CAACoB,MAAM,CAACf,MAAM,IAAIA,MAAM,CAACC,EAAE,KAAKA,EAAE,CAAC;IACpDL,YAAY,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EACnD;EAEAqB,aAAaA,CAACf,EAAU;IACtB,MAAMN,OAAO,GAAa,IAAI,CAACD,WAAW,EAAE;IAC5CC,OAAO,CAACe,OAAO,CAAC,CAACC,GAAG,EAAEC,KAAK,EAAEC,IAAI,KAAI;MACnC,IAAGZ,EAAE,KAAKU,GAAG,CAACV,EAAE,EAAC;QACfY,IAAI,CAACD,KAAK,CAAC,CAACK,SAAS,GAAG,CAACN,GAAG,CAACM,SAAS;;IAE1C,CAAC,CAAC;IACFrB,YAAY,CAAC,SAAS,CAAC,GAAGC,IAAI,CAACQ,SAAS,CAACV,OAAO,CAAC;EACnD;;SAjDWH,aAAa;;mBAAbA,MAAa;AAAA;;SAAbA,MAAa;EAAA0B,OAAA,EAAb1B,MAAa,CAAA2B,IAAA;EAAAC,UAAA,EAFZ;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}